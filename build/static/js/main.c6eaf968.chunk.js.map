{"version":3,"sources":["components/Persons.js","components/Filter.js","components/PersonForm.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Persons","props","console","log","persons","map","person","key","id","name","number","onClick","Filter","value","matcher","onChange","onMatcherChange","PersonForm","onSubmit","onNameChange","onNumberChange","type","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","notification","className","message","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setMatcher","setNotification","useEffect","personService","notifyWith","setTimeout","personsToShow","length","filter","p","toLowerCase","includes","event","target","preventDefault","existing","find","window","confirm","returnedPerson","addedPerson","concat","catch","error","toDelete","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6eaf968.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Persons = (props) => {\r\n    console.log(props.persons)\r\n    return (\r\n        props.persons.map(person =>\r\n            <p key={person.id}>\r\n                {person.name} {person.number}\r\n                <button onClick={() => props.onClick(person.id)}>delete</button>\r\n            </p>\r\n        )\r\n    )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n      <form >\r\n        <div>filter shown with <input value={props.matcher} onChange={props.onMatcherChange}/></div>\r\n      </form>\r\n    )\r\n  }\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n      <form onSubmit={props.onSubmit}>\r\n        <div>name: <input value={props.name} onChange={props.onNameChange}></input></div>\r\n        <div>number: <input value={props.number} onChange={props.onNumberChange}></input></div>\r\n        <div><button type=\"submit\">add</button></div>\r\n      </form>\r\n    )\r\n  }\r\nexport default PersonForm","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => {\r\n      return response.data\r\n    })\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteItem = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update, deleteItem}","import React from 'react'\r\n\r\nconst Notification = ({ notification }) => {\r\n    if (notification === null) {\r\n        return null\r\n    }\r\n    return (\r\n        <div className={notification.type}>\r\n            {notification.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useEffect, useState } from 'react'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nfunction App() {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [matcher, setMatcher] = useState('')\n  const [notification, setNotification] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(persons => setPersons(persons))\n  }, [])\n\n  const notifyWith = (message, type) => {\n    setNotification({ message, type })\n    setTimeout(() => {\n      setNotification(null)\n    }, 2000)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleMatcherChange = (event) => {\n    setMatcher(event.target.value)\n  }\n\n  const deletePerson = (id) => {\n    const toDelete = persons.find(p => p.id === id)\n    if(window.confirm(`Delete ${toDelete.name}`)) {\n      personService.deleteItem(id).then(response => {\n        setPersons(persons.filter(p => p.id !== id))\n        notifyWith(`Deleted ${toDelete.name}`, 'success')\n      }).catch(() => {\n        setPersons(persons.filter(p => p.id !== id))\n        notifyWith(`${toDelete.name} had already been removed`, 'error')\n      })\n    }\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const existing = (persons.find(p => p.name === newName))\n    if (existing) {\n      if (window.confirm(`${existing.name} is already added to the phonebook, replace the old number with a new one?`)) {\n        personService.update(existing.id, {\n          name: existing.name,\n          number: newNumber\n        }).then(returnedPerson => {\n          setPersons(persons.map(person => person.id !== existing.id ? person : returnedPerson))\n          notifyWith(`Changed number of ${existing.name}`, 'success')\n          setNewName('')\n          setNewNumber('')\n        })\n      }\n    } else {\n      personService.create({\n        name: newName,\n        number: newNumber\n      }).then(addedPerson => {\n        setPersons(persons.concat(addedPerson))\n        notifyWith(`Added ${newName}`, 'success')\n        setNewName('')\n        setNewNumber('')\n      }).catch(error => {\n        console.log(error.response.data.error)\n        notifyWith(`${error.response.data.error} `, 'error')\n      })\n    }\n  }\n  \n  const personsToShow = matcher.length === 0 ? persons : persons.filter(p => p.name.toLowerCase().includes(matcher.toLowerCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification}/>\n      <Filter matcher={matcher} onMatcherChange={handleMatcherChange} />\n      <h3>add a new</h3>\n      <PersonForm onSubmit={addPerson}\n                  name={newName} \n                  onNameChange={handleNameChange}\n                  number={newNumber}\n                  onNumberChange={handleNumberChange}/>\n      <h3>Numbers</h3>\n      <Persons persons={personsToShow}\n               onClick={deletePerson} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}